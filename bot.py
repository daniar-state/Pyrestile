# * Importing libraries
import json
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# * Importing modules
from database import db_manager
from moogold import ServiceMoogold
from jollymax import ServiceJollymax
from config import TG_TOKEN, TG_TOKEN_TEST, TG_ADMINS, JM_URI, JM_MERCHANT_ID, JM_MERCHANT_APP_ID, MG_URI, MG_PARTNER_ID, MG_SECRET_KEY
from logger import bot_log, err_log


class Form(StatesGroup):
    waiting_for_category_id = State()
    waiting_for_product_id = State()

bot = Bot(token=TG_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

async def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        KeyboardButton(text="üì¶ –ë–∞–ª–∞–Ω—Å Jollymax"),
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
    ]
    keyboard.add(*buttons)
    return keyboard

async def get_stat_keyboard():
    keyboard_stat = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons_stat = [
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ Vipayment"),
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ Moogold"),
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ Jollymax"),
        KeyboardButton(text="üîô –ù–∞–∑–∞–¥")
    ]
    keyboard_stat.add(*buttons_stat)
    return keyboard_stat

async def cmd_start(message: types.Message):
    await message.answer("üëãüèº –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=await get_main_keyboard())

@dp.message_handler(commands=['help'])
async def helping(message: types.Message):
    await message.answer("üìò –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n/help - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥\n/list - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞\n/id - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞")

@dp.message_handler(commands=['list'], state="*")
async def list_command_handler(message: types.Message):
    await message.answer("""üìã –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n
–°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n
Direct-top up products: 50\n
Other Gift Cards: 51\n
Amazon Gift Cards: 1391\n
Apple Music: 1444\n
Garena Shells: 766\n
Google Play: 538\n
iTunes Gift Card: 2433\n
League of Legends: 1223\n
Netflix: 874\n
PSN: 765\n
Razer Gold: 451\n
Riot Access Code: 1261\n
Spotify: 992\n
Steam: 993\n
Apex Legends: 2377
    """)
    await Form.waiting_for_category_id.set()

@dp.message_handler(commands=['id'], state="*")
async def id_command_handler(message: types.Message):
    await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞:")
    await Form.waiting_for_product_id.set()

@dp.message_handler(state=Form.waiting_for_category_id)
async def process_category_id(message: types.Message, state: FSMContext):
    MAX_MESSAGE_LENGTH = 4096
    category_id = int(message.text)
    await state.finish()
    await message.answer(f"–í—ã –≤–≤–µ–ª–∏ category_id: {category_id} –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
    try:
        products = await ServiceMoogold.get_products(uri=MG_URI, api_key=MG_SECRET_KEY, api_id=MG_PARTNER_ID, category_id=category_id)
        if products["status"] == "success":
            formatted_json = json.dumps(products["data"], indent=2, ensure_ascii=False)
            
            if len(formatted_json) <= MAX_MESSAGE_LENGTH:
                await message.answer(f"üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n{formatted_json}")
            else:
                chunks = [formatted_json[i:i+MAX_MESSAGE_LENGTH] for i in range(0, len(formatted_json), MAX_MESSAGE_LENGTH)]
                for chunk in chunks:
                    await message.answer(f"üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n{chunk}")
            
        else:
            err_log(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {products}")
            await message.answer("–û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as error:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}")

@dp.message_handler(state=Form.waiting_for_product_id)
async def process_product_id(message: types.Message, state: FSMContext):
    product_id = int(message.text)
    await state.finish()
    await message.answer(f"–í—ã –≤–≤–µ–ª–∏ product_id: {product_id} –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
    try:
        products = await ServiceMoogold.get_find_product(uri=MG_URI, api_key=MG_SECRET_KEY, api_id=MG_PARTNER_ID, product_id=product_id)
        if products["status"] == "success":
            formatted_json = json.dumps(products["data"], indent=2, ensure_ascii=False)
            await message.answer(f"üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n{formatted_json}", parse_mode="Markdown")
        else:
            err_log(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {products}")
            await message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as error:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}")

async def send_message_order(message_text):
    for user_id in TG_ADMINS:
        try:
            await bot.send_message(user_id, message_text)
            bot_log(f"[+] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {user_id}")
        except Exception as error:
            err_log(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {error}")
            continue

async def handle_req_balance(message: types.Message):
    try:
        bot_log(f"[+] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–∞–ª–∞–Ω—Å")
        balance = await ServiceJollymax.balance_query(JM_URI, JM_MERCHANT_APP_ID, JM_MERCHANT_ID)
        await message.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance['jm_balance']}.")
    except Exception as error:
        err_log(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {error}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}")

async def handle_req_stat(message: types.Message):
    vp_count = await db_manager.getCountOrderVP()
    mg_count = await db_manager.getCountOrderMG()
    jm_count = await db_manager.getCountOrderJM()
    total_count = vp_count + mg_count + jm_count
    await message.answer(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_count}\n\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ VIPAYMENT: {vp_count}\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ MOOGOLD: {mg_count}\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ JOLLYMAX: {jm_count}", reply_markup=await get_stat_keyboard())
    bot_log(f"[+] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

async def handle_contact(message: types.Message):
    await message.answer("‚úíÔ∏è –û –ù–∞—Å:\n\n–°–µ—Ä–≤–∏—Å: Skyshop API\n–ú–∞—Ä—à—Ä—É—Ç: https://skydev.host/v1/\n–ê–≤—Ç–æ—Ä: Daniar Jabagin\n–í–µ—Ä—Å–∏—è: 2.4.1\nAdmin: @pashsky\nDeveloper: @daniar_state")

async def format_orders(orders):
    return "\n".join([f"{idx + 1}. UserID: {order['user_id']}, ID: {order['order_id']}, –°—Ç–∞—Ç—É—Å: {order['status']}" for idx, order in enumerate(orders)])

async def send_large_message(chat_id, text, max_length=4000):
    while text:
        part = text[:max_length]
        await bot.send_message(chat_id, part)
        text = text[max_length:]
        
async def handle_show_vp(message: types.Message):
    orders = await db_manager.getOrderByStatusVP()
    count = len(orders)
    orders_formatted = await format_orders(orders)
    await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VIPAYMENT: {count}\n\n{orders_formatted}")
    bot_log(f"[+] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É VIPAYMENT")

async def handle_show_mg(message: types.Message):
    orders = await db_manager.getOrderByStatusMG()
    count = len(orders)
    orders_formatted = await format_orders(orders)
    await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ MOOGOLD: {count}\n\n{orders_formatted}")
    bot_log(f"[+] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É MOOGOLD")

async def handle_show_jm(message: types.Message):
    orders = await db_manager.getOrderByStatusJM()
    count = len(orders)
    orders_formatted = await format_orders(orders)
    await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ JOLLYMAX: {count}\n\n{orders_formatted}")
    bot_log(f"[+] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É JOLLYMAX")

async def handle_back(message: types.Message):
    await message.answer("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=await get_main_keyboard())

def setup(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=['start'])
    dp.register_message_handler(helping, commands=['help'])
    dp.register_message_handler(handle_req_balance, text="üì¶ –ë–∞–ª–∞–Ω—Å Jollymax")
    dp.register_message_handler(handle_req_stat, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    dp.register_message_handler(handle_contact, text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
    dp.register_message_handler(handle_show_vp, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ Vipayment")
    dp.register_message_handler(handle_show_mg, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ Moogold")
    dp.register_message_handler(handle_show_jm, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ Jollymax")
    dp.register_message_handler(handle_back, text="üîô –ù–∞–∑–∞–¥")

setup(dp)